# worker_processes auto;

# error_log /var/log/nginx/error.log notice;
# pid /var/run/nginx.pid;

# events {
#     worker_connections 1024;
# }

# http {
#     resolver 127.0.0.11;

#     include       /etc/nginx/mime.types;
#     default_type  application/octet-stream;

#     access_log /var/log/nginx/access.log;

#     server {
#         listen 0.0.0.0:8443 ssl;

#         ssl_certificate /certs/cert.crt;
#         ssl_certificate_key /certs/cert.key;
#         ssl_protocols TLSv1.2 TLSv1.3;

#         # Serve frontend statique
#         location / {
#             #root /usr/src/app/dist/;
#             proxy_pass http://0.0.0.0$request_uri;
#             index index.html;
#             try_files $uri $uri/ =404;
#         }

#         # Reverse proxy : LOGIN
#         # location /api/login {
#             # proxy_pass http://login-service:8080;
#             # proxy_set_header Host $host;
#             # proxy_set_header X-Real-IP $remote_addr;
#         # }

#         # Reverse proxy : REGISTER
#         #location /api/register {
#         #    proxy_pass http://register-service:8001;
#         #    proxy_set_header Host $host;
#         #    proxy_set_header X-Real-IP $remote_addr;
#         #}

#         # Reverse proxy : USER MANAGEMENT
#         #location /api/um {
#         #    proxy_pass http://um-service:8003;
#         #    proxy_set_header Host $host;
#         #    proxy_set_header X-Real-IP $remote_addr;
#         #}
#     }
# }

user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    resolver 127.0.0.11;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    access_log /var/log/nginx/access.log;

    server {
        listen 0.0.0.0:8443 ssl;
        #server_name localhost;

        ssl_certificate /certs/cert.crt;
        ssl_certificate_key /certs/cert.key;
        ssl_protocols TLSv1.3;

        location / {
            root /usr/src/app/frontend/dist/;
            index index.html;
            try_files $uri $uri/ =404;
        }

        #  Reverse proxy vers le backend (Fastify)
        location /api/register {
            proxy_pass http://127.0.0.1:8082$request_uri;  # Assumes Fastify is running on port 8080 inside Docker
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection 'upgrade';
            # proxy_set_header Host $host;
            # proxy_cache_bypass $http_upgrade;
            # # debug askip ??
            # add_header X-Debug "passé par nginx" always;
        }
        location /api/add-avatar {
            proxy_pass http://127.0.0.1:8086$request_uri;  # Assumes Fastify is running on port 8080 inside Docker
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection 'upgrade';
            # proxy_set_header Host $host;
            # proxy_cache_bypass $http_upgrade;
            # # debug askip ??
            # add_header X-Debug "passé par nginx" always;
        }
        location /api/login {
            proxy_pass http://127.0.0.1:8081$request_uri;  # Assumes Fastify is running on port 8080 inside Docker
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection 'upgrade';
            # proxy_set_header Host $host;
            # proxy_cache_bypass $http_upgrade;
            # # debug askip ??
            # add_header X-Debug "passé par nginx" always;
        }
        location /api/user_exist {
            proxy_pass http://127.0.0.1:8081$request_uri;  # Assumes Fastify is running on port 8080 inside Docker
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection 'upgrade';
            # proxy_set_header Host $host;
            # proxy_cache_bypass $http_upgrade;
            # # debug askip ??
            # add_header X-Debug "passé par nginx" always;
        }
    }
}